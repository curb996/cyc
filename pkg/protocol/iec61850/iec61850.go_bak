package iec61850

import (
	"context"
	"fmt"
	"sync"
	"time"

	"cyc/internal/model"
	"cyc/pkg/logger"

	"github.com/libiec61850-go/iec61850" // 这是一个假设的Go绑定，请替换为实际使用的IEC61850库
)

// Adapter 实现IEC61850协议的设备适配器
type Adapter struct {
	mutex        sync.RWMutex
	config       *model.DeviceConfig
	connection   *iec61850.Connection
	isConnected  bool
	lastError    error
	connectRetry int
}

// NewAdapter 创建新的IEC61850设备适配器
func NewAdapter(config *model.DeviceConfig) *Adapter {
	return &Adapter{
		config:       config,
		isConnected:  false,
		connectRetry: 0,
	}
}

// Connect 连接到IEC61850设备
func (a *Adapter) Connect(ctx context.Context) error {
	a.mutex.Lock()
	defer a.mutex.Unlock()

	if a.isConnected {
		return nil
	}

	logger.Infof("正在连接IEC61850设备: %s", a.config.Name)

	// 解析地址和端口
	host := a.config.Address
	port := a.config.Port
	if port == 0 {
		port = 102 // IEC61850默认MMS端口为102
	}

	// 创建连接参数
	params := iec61850.NewTConnectionParameters()
	params.SetHostname(host)
	params.SetTcpPort(int32(port))

	// 创建连接
	conn := iec61850.NewConnection()
	err := conn.Connect(params)
	if err != nil {
		a.lastError = fmt.Errorf("IEC61850连接失败: %w", err)
		logger.Errorf("IEC61850连接失败: %v", a.lastError)
		return a.lastError
	}

	// 认证（如果需要）
	if a.config.Username != "" && a.config.Password != "" {
		err = conn.Authenticate(a.config.Username, a.config.Password)
		if err != nil {
			conn.Disconnect()
			a.lastError = fmt.Errorf("IEC61850认证失败: %w", err)
			logger.Errorf("IEC61850认证失败: %v", a.lastError)
			return a.lastError
		}
	}

	a.connection = conn
	a.isConnected = true
	a.connectRetry = 0
	logger.Infof("IEC61850设备连接成功: %s", a.config.Name)

	return nil
}

// Disconnect 断开IEC61850设备连接
func (a *Adapter) Disconnect(ctx context.Context) error {
	a.mutex.Lock()
	defer a.mutex.Unlock()

	if !a.isConnected {
		return nil
	}

	logger.Infof("正在断开IEC61850设备连接: %s", a.config.Name)

	if a.connection != nil {
		a.connection.Disconnect()
		a.connection = nil
	}

	a.isConnected = false
	return nil
}

// IsConnected 判断是否已连接到设备
func (a *Adapter) IsConnected() bool {
	a.mutex.RLock()
	defer a.mutex.RUnlock()
	return a.isConnected
}

// ReadPoints 读取多个数据点
func (a *Adapter) ReadPoints(ctx context.Context, points []*model.PointConfig) ([]*model.PointData, error) {
	a.mutex.RLock()
	connected := a.isConnected
	connection := a.connection
	a.mutex.RUnlock()

	if !connected || connection == nil {
		return nil, fmt.Errorf("IEC61850设备未连接")
	}

	result := make([]*model.PointData, 0, len(points))

	// 读取数据点
	for _, point := range points {
		// 获取数据点路径
		path := point.Address

		// 读取数据点
		dataAttribute, err := connection.ReadDataAttributeValue(path)
		if err != nil {
			logger.Errorf("读取数据点失败: %v", err)
			continue
		}

		// 解析数据值
		value, err := parseIEC61850Value(dataAttribute, point.DataType)
		if err != nil {
			logger.Errorf("解析IEC61850数据失败: %v", err)
			continue
		}

		// 获取质量和时间戳
		quality := model.QualityGood
		timestamp := time.Now()

		// 如果是MMS数据对象，尝试获取质量和时间戳
		mmsObject, ok := dataAttribute.(*iec61850.MMSDataObject)
		if ok {
			q := mmsObject.GetQuality()
			if q != nil {
				if q.IsValid() {
					quality = model.QualityGood
				} else {
					quality = model.QualityBad
				}
			}

			ts := mmsObject.GetTimestamp()
			if ts != nil {
				timestamp = ts.ToTime()
			}
		}

		result = append(result, &model.PointData{
			DeviceID:  a.config.ID,
			PointID:   point.ID,
			Value:     value,
			Timestamp: timestamp,
			Quality:   quality,
		})
	}

	return result, nil
}

// WritePoint 写入数据点
func (a *Adapter) WritePoint(ctx context.Context, point *model.PointConfig, value interface{}) error {
	a.mutex.RLock()
	connected := a.isConnected
	connection := a.connection
	a.mutex.RUnlock()

	if !connected || connection == nil {
		return fmt.Errorf("IEC61850设备未连接")
	}

	// 获取数据点路径
	path := point.Address

	// 创建MMS数据对象
	dataValue, err := createIEC61850Value(value, point.DataType)
	if err != nil {
		return fmt.Errorf("创建IEC61850数据值失败: %w", err)
	}

	// 写入数据
	err = connection.WriteDataAttributeValue(path, dataValue)
	if err != nil {
		return fmt.Errorf("写入数据点失败: %w", err)
	}

	logger.Infof("已写入点位 %s 值: %v", point.Name, value)
	return nil
}

// GetDeviceInfo 获取设备信息
func (a *Adapter) GetDeviceInfo() *model.DeviceInfo {
	a.mutex.RLock()
	defer a.mutex.RUnlock()

	return &model.DeviceInfo{
		ID:          a.config.ID,
		Name:        a.config.Name,
		Type:        a.config.Type,
		Protocol:    "IEC61850",
		IsConnected: a.isConnected,
		LastError:   a.lastError,
	}
}

// 辅助函数

// parseIEC61850Value 解析IEC61850数据值
func parseIEC61850Value(dataAttribute interface{}, dataType string) (interface{}, error) {
	// 根据数据类型解析值
	switch dataType {
	case "boolean":
		boolValue, ok := dataAttribute.(*iec61850.Boolean)
		if !ok {
			return nil, fmt.Errorf("数据类型不匹配")
		}
		return boolValue.GetValue(), nil
	case "int32":
		intValue, ok := dataAttribute.(*iec61850.Int32)
		if !ok {
			return nil, fmt.Errorf("数据类型不匹配")
		}
		return intValue.GetValue(), nil
	case "float32":
		floatValue, ok := dataAttribute.(*iec61850.Float32)
		if !ok {
			return nil, fmt.Errorf("数据类型不匹配")
		}
		return floatValue.GetValue(), nil
	case "string":
		stringValue, ok := dataAttribute.(*iec61850.VisibleString)
		if !ok {
			return nil, fmt.Errorf("数据类型不匹配")
		}
		return stringValue.GetValue(), nil
	case "timestamp":
		timeValue, ok := dataAttribute.(*iec61850.Timestamp)
		if !ok {
			return nil, fmt.Errorf("数据类型不匹配")
		}
		return timeValue.ToTime(), nil
	default:
		return nil, fmt.Errorf("不支持的数据类型: %s", dataType)
	}
}

// createIEC61850Value 创建IEC61850数据值
func createIEC61850Value(value interface{}, dataType string) (interface{}, error) {
	// 根据数据类型创建值
	switch dataType {
	case "boolean":
		boolValue, ok := value.(bool)
		if !ok {
			return nil, fmt.Errorf("值类型不匹配")
		}
		return iec61850.NewBoolean(boolValue), nil
	case "int32":
		intValue, ok := value.(int32)
		if !ok {
			// 尝试转换
			if intVal, ok := value.(int); ok {
				intValue = int32(intVal)
			} else {
				return nil, fmt.Errorf("值类型不匹配")
			}
		}
		return iec61850.NewInt32(intValue), nil
	case "float32":
		floatValue, ok := value.(float32)
		if !ok {
			// 尝试转换
			if floatVal, ok := value.(float64); ok {
				floatValue = float32(floatVal)
			} else {
				return nil, fmt.Errorf("值类型不匹配")
			}
		}
		return iec61850.NewFloat32(floatValue), nil
	case "string":
		stringValue, ok := value.(string)
		if !ok {
			return nil, fmt.Errorf("值类型不匹配")
		}
		return iec61850.NewVisibleString(stringValue), nil
	default:
		return nil, fmt.Errorf("不支持的数据类型: %s", dataType)
	}
}
