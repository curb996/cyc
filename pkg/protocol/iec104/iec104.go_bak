package iec104

import (
	"context"
	"fmt"
	"sync"
	"time"

	"cyc/internal/model"
	"cyc/pkg/logger"

	"github.com/thinkgos/go-iecp5/cs104" // 这是一个示例IEC104库，请替换为实际使用的库
)

// Adapter 实现IEC104协议的设备适配器
type Adapter struct {
	mutex        sync.RWMutex
	config       *model.DeviceConfig
	client       *cs104.Client
	isConnected  bool
	lastError    error
	connectRetry int
	dataChan     chan cs104.DataInfo // 用于接收异步数据
}

// NewAdapter 创建新的IEC104设备适配器
func NewAdapter(config *model.DeviceConfig) *Adapter {
	return &Adapter{
		config:       config,
		isConnected:  false,
		connectRetry: 0,
		dataChan:     make(chan cs104.DataInfo, 100),
	}
}

// Connect 连接到IEC104设备
func (a *Adapter) Connect(ctx context.Context) error {
	a.mutex.Lock()
	defer a.mutex.Unlock()

	if a.isConnected {
		return nil
	}

	logger.Infof("正在连接IEC104设备: %s", a.config.Name)

	// 创建客户端选项
	options := []cs104.ClientOption{
		cs104.ClientConnectTimeout(time.Second * 10),
		cs104.ClientReconnectInterval(time.Second * 5),
	}

	// 解析地址和端口
	host := a.config.Address
	if a.config.Port != 0 {
		host = fmt.Sprintf("%s:%d", a.config.Address, a.config.Port)
	} else {
		host = fmt.Sprintf("%s:2404", a.config.Address) // IEC104默认端口
	}

	// 创建客户端
	client := cs104.NewClient(host, options...)

	// 设置事件处理
	client.SetOnConnectHandler(func(c *cs104.Client) {
		logger.Infof("IEC104设备已连接: %s", a.config.Name)
	})

	client.SetOnConnectionLostHandler(func(c *cs104.Client) {
		logger.Warnf("IEC104设备连接丢失: %s", a.config.Name)
		a.mutex.Lock()
		a.isConnected = false
		a.mutex.Unlock()
	})

	// 设置数据接收处理
	client.SetDataHandler(func(c *cs104.Client, data cs104.DataInfo) {
		select {
		case a.dataChan <- data:
			// 数据成功放入通道
		default:
			logger.Warnf("IEC104数据通道已满，丢弃数据")
		}
	})

	// 开启客户端
	err := client.Start()
	if err != nil {
		a.lastError = fmt.Errorf("IEC104客户端启动失败: %w", err)
		logger.Errorf("IEC104连接失败: %v", a.lastError)
		return a.lastError
	}

	// 发送总召唤命令
	err = client.Interrogation(cs104.CauseOfTransmission{Cause: cs104.Activation}, 0, cs104.QOIStation)
	if err != nil {
		logger.Warnf("总召唤命令发送失败: %v", err)
	}

	a.client = client
	a.isConnected = true
	a.connectRetry = 0
	logger.Infof("IEC104设备连接成功: %s", a.config.Name)

	return nil
}

// Disconnect 断开IEC104设备连接
func (a *Adapter) Disconnect(ctx context.Context) error {
	a.mutex.Lock()
	defer a.mutex.Unlock()

	if !a.isConnected {
		return nil
	}

	logger.Infof("正在断开IEC104设备连接: %s", a.config.Name)

	if a.client != nil {
		a.client.Close()
		a.client = nil
	}

	a.isConnected = false
	return nil
}

// IsConnected 判断是否已连接到设备
func (a *Adapter) IsConnected() bool {
	a.mutex.RLock()
	defer a.mutex.RUnlock()
	return a.isConnected
}

// ReadPoints 读取多个数据点
func (a *Adapter) ReadPoints(ctx context.Context, points []*model.PointConfig) ([]*model.PointData, error) {
	a.mutex.RLock()
	connected := a.isConnected
	client := a.client
	a.mutex.RUnlock()

	if !connected || client == nil {
		return nil, fmt.Errorf("IEC104设备未连接")
	}

	result := make([]*model.PointData, 0, len(points))

	// 创建读取请求
	for _, point := range points {
		// 解析信息对象地址
		ioa, err := parseIOA(point.Address)
		if err != nil {
			logger.Errorf("解析IOA失败: %v", err)
			continue
		}

		// 确定类型标识
		ti, err := getTypeID(point.DataType)
		if err != nil {
			logger.Errorf("获取类型标识失败: %v", err)
			continue
		}

		// 读取点位
		err = client.ReadCmd(cs104.CauseOfTransmission{Cause: cs104.Activation}, 0, ti, ioa)
		if err != nil {
			logger.Errorf("读取点位失败: %v", err)
			continue
		}

		// 等待响应
		timer := time.NewTimer(time.Second * 3)
		select {
		case <-ctx.Done():
			timer.Stop()
			return result, ctx.Err()
		case data := <-a.dataChan:
			timer.Stop()
			// 检查是否是我们请求的数据
			if data.CommonAddr == 0 && data.InfoObjAddr == ioa {
				// 解析数据
				value, err := parseIEC104Data(data)
				if err != nil {
					logger.Errorf("解析IEC104数据失败: %v", err)
					continue
				}

				result = append(result, &model.PointData{
					DeviceID:  a.config.ID,
					PointID:   point.ID,
					Value:     value,
					Timestamp: time.Now(),
					Quality:   model.QualityGood,
				})
			}
		case <-timer.C:
			logger.Warnf("读取点位超时: %s", point.Name)
		}
	}

	return result, nil
}

// WritePoint 写入数据点
func (a *Adapter) WritePoint(ctx context.Context, point *model.PointConfig, value interface{}) error {
	a.mutex.RLock()
	connected := a.isConnected
	client := a.client
	a.mutex.RUnlock()

	if !connected || client == nil {
		return fmt.Errorf("IEC104设备未连接")
	}

	// 解析信息对象地址
	ioa, err := parseIOA(point.Address)
	if err != nil {
		return fmt.Errorf("解析IOA失败: %w", err)
	}

	// 根据数据类型和值发送命令
	switch point.DataType {
	case "single":
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("值类型不匹配")
		}
		err = client.SingleCmd(cs104.CauseOfTransmission{Cause: cs104.Activation}, 0, ioa, v)
	case "double":
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("值类型不匹配")
		}
		err = client.DoubleCmd(cs104.CauseOfTransmission{Cause: cs104.Activation}, 0, ioa, v)
	case "float":
		v, ok := value.(float32)
		if !ok {
			return fmt.Errorf("值类型不匹配")
		}
		err = client.SetPointCmd(cs104.CauseOfTransmission{Cause: cs104.Activation}, 0, ioa, v)
	default:
		return fmt.Errorf("不支持的数据类型: %s", point.DataType)
	}

	if err != nil {
		return fmt.Errorf("发送命令失败: %w", err)
	}

	logger.Infof("已写入点位 %s 值: %v", point.Name, value)
	return nil
}

// GetDeviceInfo 获取设备信息
func (a *Adapter) GetDeviceInfo() *model.DeviceInfo {
	a.mutex.RLock()
	defer a.mutex.RUnlock()

	return &model.DeviceInfo{
		ID:          a.config.ID,
		Name:        a.config.Name,
		Type:        a.config.Type,
		Protocol:    "IEC104",
		IsConnected: a.isConnected,
		LastError:   a.lastError,
	}
}

// 辅助函数

// parseIOA 从字符串解析信息对象地址
func parseIOA(address string) (int, error) {
	var ioa int
	_, err := fmt.Sscanf(address, "%d", &ioa)
	if err != nil {
		return 0, err
	}
	return ioa, nil
}

// getTypeID 根据数据类型获取类型标识
func getTypeID(dataType string) (uint8, error) {
	switch dataType {
	case "single":
		return cs104.M_SP_NA_1, nil // 单点信息
	case "double":
		return cs104.M_DP_NA_1, nil // 双点信息
	case "float":
		return cs104.M_ME_NC_1, nil // 浮点值
	default:
		return 0, fmt.Errorf("不支持的数据类型: %s", dataType)
	}
}

// parseIEC104Data 解析IEC104数据
func parseIEC104Data(data cs104.DataInfo) (interface{}, error) {
	switch data.TypeID {
	case cs104.M_SP_NA_1, cs104.M_SP_TA_1:
		// 单点信息
		spi, ok := data.Value.(cs104.SinglePointInfo)
		if !ok {
			return nil, fmt.Errorf("数据类型转换失败")
		}
		return spi.Value, nil
	case cs104.M_DP_NA_1, cs104.M_DP_TA_1:
		// 双点信息
		dpi, ok := data.Value.(cs104.DoublePointInfo)
		if !ok {
			return nil, fmt.Errorf("数据类型转换失败")
		}
		return int(dpi.Value), nil
	case cs104.M_ME_NA_1, cs104.M_ME_TA_1:
		// 归一化值
		nva, ok := data.Value.(cs104.NormalizedValue)
		if !ok {
			return nil, fmt.Errorf("数据类型转换失败")
		}
		return nva.Value, nil
	case cs104.M_ME_NB_1, cs104.M_ME_TB_1:
		// 标度化值
		sva, ok := data.Value.(cs104.ScaledValue)
		if !ok {
			return nil, fmt.Errorf("数据类型转换失败")
		}
		return sva.Value, nil
	case cs104.M_ME_NC_1, cs104.M_ME_TC_1:
		// 短浮点值
		fva, ok := data.Value.(cs104.FloatValue)
		if !ok {
			return nil, fmt.Errorf("数据类型转换失败")
		}
		return fva.Value, nil
	default:
		return nil, fmt.Errorf("不支持的类型标识: %d", data.TypeID)
	}
}
