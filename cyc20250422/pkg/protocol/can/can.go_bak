package can

import (
	"context"
	"fmt"
	"sync"
	"time"

	"cyc/internal/model"
	"cyc/pkg/logger"

	"github.com/brutella/can" // 这是一个示例CAN库，请根据实际使用的库替换
)

// Adapter 实现CAN协议的设备适配器
type Adapter struct {
	mutex        sync.RWMutex
	config       *model.DeviceConfig
	bus          *can.Bus
	isConnected  bool
	lastError    error
	connectRetry int
}

// NewAdapter 创建新的CAN设备适配器
func NewAdapter(config *model.DeviceConfig) *Adapter {
	return &Adapter{
		config:       config,
		isConnected:  false,
		connectRetry: 0,
	}
}

// Connect 连接到CAN设备
func (a *Adapter) Connect(ctx context.Context) error {
	a.mutex.Lock()
	defer a.mutex.Unlock()

	if a.isConnected {
		return nil
	}

	logger.Infof("正在连接CAN设备: %s", a.config.Name)

	// 创建CAN总线连接
	// 使用设备配置中的接口名称（如"can0"）
	bus, err := can.NewBusForInterfaceWithName(a.config.Address)
	if err != nil {
		a.lastError = fmt.Errorf("CAN总线连接失败: %w", err)
		logger.Errorf("CAN连接失败: %v", a.lastError)
		return a.lastError
	}

	// 启动CAN总线
	err = bus.ConnectAndPublish()
	if err != nil {
		a.lastError = fmt.Errorf("CAN总线启动失败: %w", err)
		logger.Errorf("CAN启动失败: %v", a.lastError)
		return a.lastError
	}

	a.bus = bus
	a.isConnected = true
	a.connectRetry = 0
	logger.Infof("CAN设备连接成功: %s", a.config.Name)

	return nil
}

// Disconnect 断开CAN设备连接
func (a *Adapter) Disconnect(ctx context.Context) error {
	a.mutex.Lock()
	defer a.mutex.Unlock()

	if !a.isConnected {
		return nil
	}

	logger.Infof("正在断开CAN设备连接: %s", a.config.Name)

	if a.bus != nil {
		a.bus.Disconnect()
		a.bus = nil
	}

	a.isConnected = false
	return nil
}

// IsConnected 判断是否已连接到设备
func (a *Adapter) IsConnected() bool {
	a.mutex.RLock()
	defer a.mutex.RUnlock()
	return a.isConnected
}

// ReadPoints 读取多个数据点
func (a *Adapter) ReadPoints(ctx context.Context, points []*model.PointConfig) ([]*model.PointData, error) {
	a.mutex.RLock()
	defer a.mutex.RUnlock()

	if !a.isConnected {
		return nil, fmt.Errorf("CAN设备未连接")
	}

	result := make([]*model.PointData, 0, len(points))

	// 设置接收消息的通道
	msgCh := make(chan can.Frame)
	subscription := a.bus.Subscribe(msgCh)
	defer subscription.Cancel()

	// 为每个要读取的点位发送对应的CAN请求
	for _, point := range points {
		// 创建CAN请求帧
		// 这里需要根据实际协议格式构造请求
		requestID, err := parseCANID(point.Address)
		if err != nil {
			logger.Errorf("解析CAN ID失败: %v", err)
			continue
		}

		// 创建并发送请求帧
		frame := can.Frame{
			ID:     requestID,
			Length: 8,
			Data:   [8]byte{0x01, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00}, // 示例请求格式
		}
		a.bus.Publish(frame)

		// 设置超时
		timer := time.NewTimer(time.Second * 2)

		select {
		case <-ctx.Done():
			timer.Stop()
			return result, ctx.Err()
		case response := <-msgCh:
			timer.Stop()
			// 检查是否是我们期望的回复
			if response.ID == (requestID | 0x80000000) { // 假设回复ID是请求ID+最高位
				// 解析数据
				value, err := parseCANData(response.Data[:], point.DataType)
				if err != nil {
					logger.Errorf("解析CAN数据失败: %v", err)
					continue
				}

				result = append(result, &model.PointData{
					DeviceID:  a.config.ID,
					PointID:   point.ID,
					Value:     value,
					Timestamp: time.Now(),
					Quality:   model.QualityGood,
				})
			}
		case <-timer.C:
			logger.Warnf("读取点位超时: %s", point.Name)
		}
	}

	return result, nil
}

// WritePoint 写入数据点
func (a *Adapter) WritePoint(ctx context.Context, point *model.PointConfig, value interface{}) error {
	a.mutex.RLock()
	defer a.mutex.RUnlock()

	if !a.isConnected {
		return fmt.Errorf("CAN设备未连接")
	}

	// 创建CAN写入帧
	requestID, err := parseCANID(point.Address)
	if err != nil {
		return fmt.Errorf("解析CAN ID失败: %w", err)
	}

	// 将值转换为字节数组
	dataBytes, err := convertValueToBytes(value, point.DataType)
	if err != nil {
		return fmt.Errorf("值转换失败: %w", err)
	}

	// 创建CAN帧
	frame := can.Frame{
		ID:     requestID,
		Length: uint8(len(dataBytes)),
	}

	// 复制数据到帧
	copy(frame.Data[:], dataBytes)

	// 发送帧
	a.bus.Publish(frame)

	logger.Infof("已写入点位 %s 值: %v", point.Name, value)
	return nil
}

// GetDeviceInfo 获取设备信息
func (a *Adapter) GetDeviceInfo() *model.DeviceInfo {
	a.mutex.RLock()
	defer a.mutex.RUnlock()

	return &model.DeviceInfo{
		ID:          a.config.ID,
		Name:        a.config.Name,
		Type:        a.config.Type,
		Protocol:    "CAN",
		IsConnected: a.isConnected,
		LastError:   a.lastError,
	}
}

// 辅助函数

// parseCANID 从字符串解析CAN ID
func parseCANID(address string) (uint32, error) {
	var id uint32
	_, err := fmt.Sscanf(address, "%x", &id)
	if err != nil {
		return 0, err
	}
	return id, nil
}

// parseCANData 解析CAN数据
func parseCANData(data []byte, dataType string) (interface{}, error) {
	switch dataType {
	case "int16":
		if len(data) < 2 {
			return nil, fmt.Errorf("数据长度不足")
		}
		return int16(uint16(data[0])<<8 | uint16(data[1])), nil
	case "uint16":
		if len(data) < 2 {
			return nil, fmt.Errorf("数据长度不足")
		}
		return uint16(data[0])<<8 | uint16(data[1]), nil
	case "float32":
		if len(data) < 4 {
			return nil, fmt.Errorf("数据长度不足")
		}
		bits := uint32(data[0])<<24 | uint32(data[1])<<16 | uint32(data[2])<<8 | uint32(data[3])
		return float32(bits), nil
	default:
		return nil, fmt.Errorf("不支持的数据类型: %s", dataType)
	}
}

// convertValueToBytes 将值转换为字节数组
func convertValueToBytes(value interface{}, dataType string) ([]byte, error) {
	switch dataType {
	case "int16":
		v, ok := value.(int16)
		if !ok {
			return nil, fmt.Errorf("值类型不匹配")
		}
		return []byte{byte(v >> 8), byte(v)}, nil
	case "uint16":
		v, ok := value.(uint16)
		if !ok {
			return nil, fmt.Errorf("值类型不匹配")
		}
		return []byte{byte(v >> 8), byte(v)}, nil
	case "float32":
		v, ok := value.(float32)
		if !ok {
			return nil, fmt.Errorf("值类型不匹配")
		}
		bits := uint32(v)
		return []byte{byte(bits >> 24), byte(bits >> 16), byte(bits >> 8), byte(bits)}, nil
	default:
		return nil, fmt.Errorf("不支持的数据类型: %s", dataType)
	}
}
